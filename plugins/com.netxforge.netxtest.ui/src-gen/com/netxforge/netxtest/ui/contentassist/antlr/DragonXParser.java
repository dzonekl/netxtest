/*
* generated by Xtext
*/
package com.netxforge.netxtest.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.netxforge.netxtest.services.DragonXGrammarAccess;

public class DragonXParser extends AbstractContentAssistParser {
	
	@Inject
	private DragonXGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.netxforge.netxtest.ui.contentassist.antlr.internal.InternalDragonXParser createParser() {
		com.netxforge.netxtest.ui.contentassist.antlr.internal.InternalDragonXParser result = new com.netxforge.netxtest.ui.contentassist.antlr.internal.InternalDragonXParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getUEMetaObjectAccess().getAlternatives(), "rule__UEMetaObject__Alternatives");
					put(grammarAccess.getUEValueAccess().getAlternatives(), "rule__UEValue__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getParamTypeAccess().getAlternatives(), "rule__ParamType__Alternatives");
					put(grammarAccess.getPARAM_NAMEAccess().getAlternatives(), "rule__PARAM_NAME__Alternatives");
					put(grammarAccess.getPARAM_RESPONSEAccess().getAlternatives(), "rule__PARAM_RESPONSE__Alternatives");
					put(grammarAccess.getACTIONCODEAccess().getAlternatives(), "rule__ACTIONCODE__Alternatives");
					put(grammarAccess.getUEPARAMSAccess().getAlternatives(), "rule__UEPARAMS__Alternatives");
					put(grammarAccess.getUSSDCODESAccess().getAlternatives(), "rule__USSDCODES__Alternatives");
					put(grammarAccess.getDragonXAccess().getGroup(), "rule__DragonX__Group__0");
					put(grammarAccess.getUEAccess().getGroup(), "rule__UE__Group__0");
					put(grammarAccess.getUEMetaObjectAccess().getGroup_0(), "rule__UEMetaObject__Group_0__0");
					put(grammarAccess.getTestCaseAccess().getGroup(), "rule__TestCase__Group__0");
					put(grammarAccess.getDescriptionObjectAccess().getGroup(), "rule__DescriptionObject__Group__0");
					put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
					put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getQUALIFIED_IDAccess().getGroup(), "rule__QUALIFIED_ID__Group__0");
					put(grammarAccess.getQUALIFIED_IDAccess().getGroup_1(), "rule__QUALIFIED_ID__Group_1__0");
					put(grammarAccess.getDragonXAccess().getUesAssignment_0(), "rule__DragonX__UesAssignment_0");
					put(grammarAccess.getDragonXAccess().getTestsAssignment_1(), "rule__DragonX__TestsAssignment_1");
					put(grammarAccess.getUEAccess().getNameAssignment_1(), "rule__UE__NameAssignment_1");
					put(grammarAccess.getUEAccess().getMetaAssignment_3(), "rule__UE__MetaAssignment_3");
					put(grammarAccess.getUEMetaObjectAccess().getParamsAssignment_0_0(), "rule__UEMetaObject__ParamsAssignment_0_0");
					put(grammarAccess.getUEMetaObjectAccess().getParamValueAssignment_0_2(), "rule__UEMetaObject__ParamValueAssignment_0_2");
					put(grammarAccess.getTestCaseAccess().getNameAssignment_1(), "rule__TestCase__NameAssignment_1");
					put(grammarAccess.getTestCaseAccess().getDescriptionAssignment_3(), "rule__TestCase__DescriptionAssignment_3");
					put(grammarAccess.getTestCaseAccess().getProcedureAssignment_4(), "rule__TestCase__ProcedureAssignment_4");
					put(grammarAccess.getDescriptionObjectAccess().getDescriptionAssignment_2(), "rule__DescriptionObject__DescriptionAssignment_2");
					put(grammarAccess.getProcedureAccess().getActionsAssignment_2(), "rule__Procedure__ActionsAssignment_2");
					put(grammarAccess.getActionAccess().getActionCodeAssignment_0(), "rule__Action__ActionCodeAssignment_0");
					put(grammarAccess.getActionAccess().getParameterSetAssignment_1_1(), "rule__Action__ParameterSetAssignment_1_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1(), "rule__Parameter__TypeAssignment_1");
					put(grammarAccess.getParamTypeAccess().getUeRefAssignment_0(), "rule__ParamType__UeRefAssignment_0");
					put(grammarAccess.getParamTypeAccess().getValueAssignment_1(), "rule__ParamType__ValueAssignment_1");
					put(grammarAccess.getParamTypeAccess().getResponseAssignment_2(), "rule__ParamType__ResponseAssignment_2");
					put(grammarAccess.getParamResponseTypeAccess().getParamResponseAssignment(), "rule__ParamResponseType__ParamResponseAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.netxforge.netxtest.ui.contentassist.antlr.internal.InternalDragonXParser typedParser = (com.netxforge.netxtest.ui.contentassist.antlr.internal.InternalDragonXParser) parser;
			typedParser.entryRuleDragonX();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DragonXGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DragonXGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
