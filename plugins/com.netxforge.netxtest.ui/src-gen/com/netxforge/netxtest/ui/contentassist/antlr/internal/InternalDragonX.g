/*
* generated by Xtext
*/
grammar InternalDragonX;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.netxforge.netxtest.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.netxforge.netxtest.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.netxforge.netxtest.services.DragonXGrammarAccess;

}

@parser::members {
 
 	private DragonXGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DragonXGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDragonX
entryRuleDragonX 
:
{ before(grammarAccess.getDragonXRule()); }
	 ruleDragonX
{ after(grammarAccess.getDragonXRule()); } 
	 EOF 
;

// Rule DragonX
ruleDragonX
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDragonXAccess().getTestsAssignment()); }
(rule__DragonX__TestsAssignment)*
{ after(grammarAccess.getDragonXAccess().getTestsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTest
entryRuleTest 
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getGroup()); }
(rule__Test__Group__0)
{ after(grammarAccess.getTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestMeta
entryRuleTestMeta 
:
{ before(grammarAccess.getTestMetaRule()); }
	 ruleTestMeta
{ after(grammarAccess.getTestMetaRule()); } 
	 EOF 
;

// Rule TestMeta
ruleTestMeta
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestMetaAccess().getMetaAssignment()); }
(rule__TestMeta__MetaAssignment)
{ after(grammarAccess.getTestMetaAccess().getMetaAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestMetaObject
entryRuleTestMetaObject 
:
{ before(grammarAccess.getTestMetaObjectRule()); }
	 ruleTestMetaObject
{ after(grammarAccess.getTestMetaObjectRule()); } 
	 EOF 
;

// Rule TestMetaObject
ruleTestMetaObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestMetaObjectAccess().getGroup()); }
(rule__TestMetaObject__Group__0)
{ after(grammarAccess.getTestMetaObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMetaValue
entryRuleMetaValue 
:
{ before(grammarAccess.getMetaValueRule()); }
	 ruleMetaValue
{ after(grammarAccess.getMetaValueRule()); } 
	 EOF 
;

// Rule MetaValue
ruleMetaValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMetaValueAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getMetaValueAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedure
entryRuleProcedure 
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureAccess().getActionsAssignment()); }
(rule__Procedure__ActionsAssignment)
{ after(grammarAccess.getProcedureAccess().getActionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule METATYPE
ruleMETATYPE
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMETATYPEAccess().getDescriptionEnumLiteralDeclaration()); }
(	'Description' 
)
{ after(grammarAccess.getMETATYPEAccess().getDescriptionEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ACTIONS
ruleACTIONS
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACTIONSAccess().getAlternatives()); }
(rule__ACTIONS__Alternatives)
{ after(grammarAccess.getACTIONSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getValueAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ACTIONS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACTIONSAccess().getCallEnumLiteralDeclaration_0()); }
(	'CALL' 
)
{ after(grammarAccess.getACTIONSAccess().getCallEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getACTIONSAccess().getUssdEnumLiteralDeclaration_1()); }
(	'USSD' 
)
{ after(grammarAccess.getACTIONSAccess().getUssdEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getACTIONSAccess().getSmsEnumLiteralDeclaration_2()); }
(	'SMS' 
)
{ after(grammarAccess.getACTIONSAccess().getSmsEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getACTIONSAccess().getDataEnumLiteralDeclaration_3()); }
(	'DATA' 
)
{ after(grammarAccess.getACTIONSAccess().getDataEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Test__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getTESTKeyword_0()); }

	'TEST' 

{ after(grammarAccess.getTestAccess().getTESTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getNameAssignment_1()); }
(rule__Test__NameAssignment_1)
{ after(grammarAccess.getTestAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getMetaAssignment_2()); }
(rule__Test__MetaAssignment_2)
{ after(grammarAccess.getTestAccess().getMetaAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getProcedureAssignment_3()); }
(rule__Test__ProcedureAssignment_3)
{ after(grammarAccess.getTestAccess().getProcedureAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TestMetaObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestMetaObject__Group__0__Impl
	rule__TestMetaObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestMetaObject__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMetaObjectAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getTestMetaObjectAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestMetaObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestMetaObject__Group__1__Impl
	rule__TestMetaObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestMetaObject__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMetaObjectAccess().getMetatypeAssignment_1()); }
(rule__TestMetaObject__MetatypeAssignment_1)
{ after(grammarAccess.getTestMetaObjectAccess().getMetatypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestMetaObject__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestMetaObject__Group__2__Impl
	rule__TestMetaObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestMetaObject__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMetaObjectAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getTestMetaObjectAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestMetaObject__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestMetaObject__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestMetaObject__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMetaObjectAccess().getMetaValueAssignment_3()); }
(rule__TestMetaObject__MetaValueAssignment_3)
{ after(grammarAccess.getTestMetaObjectAccess().getMetaValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActionAssignment_0()); }
(rule__Action__ActionAssignment_0)
{ after(grammarAccess.getActionAccess().getActionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getParametersAssignment_1()); }
(rule__Action__ParametersAssignment_1)
{ after(grammarAccess.getActionAccess().getParametersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNumberSignKeyword_0()); }

	'#' 

{ after(grammarAccess.getParameterAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getValueAssignment_3()); }
(rule__Parameter__ValueAssignment_3)
{ after(grammarAccess.getParameterAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__DragonX__TestsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDragonXAccess().getTestsTestParserRuleCall_0()); }
	ruleTest{ after(grammarAccess.getDragonXAccess().getTestsTestParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__MetaAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getMetaTestMetaParserRuleCall_2_0()); }
	ruleTestMeta{ after(grammarAccess.getTestAccess().getMetaTestMetaParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__ProcedureAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getProcedureProcedureParserRuleCall_3_0()); }
	ruleProcedure{ after(grammarAccess.getTestAccess().getProcedureProcedureParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestMeta__MetaAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMetaAccess().getMetaTestMetaObjectParserRuleCall_0()); }
	ruleTestMetaObject{ after(grammarAccess.getTestMetaAccess().getMetaTestMetaObjectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestMetaObject__MetatypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMetaObjectAccess().getMetatypeMETATYPEEnumRuleCall_1_0()); }
	ruleMETATYPE{ after(grammarAccess.getTestMetaObjectAccess().getMetatypeMETATYPEEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestMetaObject__MetaValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMetaObjectAccess().getMetaValueMetaValueParserRuleCall_3_0()); }
	ruleMetaValue{ after(grammarAccess.getTestMetaObjectAccess().getMetaValueMetaValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ActionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_0()); }
	ruleAction{ after(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActionACTIONSEnumRuleCall_0_0()); }
	ruleACTIONS{ after(grammarAccess.getActionAccess().getActionACTIONSEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ParametersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getParametersParameterParserRuleCall_1_0()); }
	ruleParameter{ after(grammarAccess.getActionAccess().getParametersParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getValueValueParserRuleCall_3_0()); }
	ruleValue{ after(grammarAccess.getParameterAccess().getValueValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


