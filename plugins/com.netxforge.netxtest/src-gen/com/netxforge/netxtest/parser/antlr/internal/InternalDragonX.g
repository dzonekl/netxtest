/*
* generated by Xtext
*/
grammar InternalDragonX;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.netxforge.netxtest.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.netxforge.netxtest.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.netxforge.netxtest.services.DragonXGrammarAccess;

}

@parser::members {

 	private DragonXGrammarAccess grammarAccess;
 	
    public InternalDragonXParser(TokenStream input, DragonXGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DragonX";	
   	}
   	
   	@Override
   	protected DragonXGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDragonX
entryRuleDragonX returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDragonXRule()); }
	 iv_ruleDragonX=ruleDragonX 
	 { $current=$iv_ruleDragonX.current; } 
	 EOF 
;

// Rule DragonX
ruleDragonX returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDragonXAccess().getUesUEParserRuleCall_0_0()); 
	    }
		lv_ues_0_0=ruleUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDragonXRule());
	        }
       		add(
       			$current, 
       			"ues",
        		lv_ues_0_0, 
        		"UE");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getDragonXAccess().getTestsTestCaseParserRuleCall_1_0()); 
	    }
		lv_tests_1_0=ruleTestCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDragonXRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_1_0, 
        		"TestCase");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleUE
entryRuleUE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUERule()); }
	 iv_ruleUE=ruleUE 
	 { $current=$iv_ruleUE.current; } 
	 EOF 
;

// Rule UE
ruleUE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='UE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUEAccess().getUEKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUEAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUEAccess().getMetaUEMetaObjectParserRuleCall_2_0()); 
	    }
		lv_meta_2_0=ruleUEMetaObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUERule());
	        }
       		add(
       			$current, 
       			"meta",
        		lv_meta_2_0, 
        		"UEMetaObject");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUEAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleUEMetaObject
entryRuleUEMetaObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUEMetaObjectRule()); }
	 iv_ruleUEMetaObject=ruleUEMetaObject 
	 { $current=$iv_ruleUEMetaObject.current; } 
	 EOF 
;

// Rule UEMetaObject
ruleUEMetaObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUEMetaObjectAccess().getParamsUEPARAMSEnumRuleCall_0_0()); 
	    }
		lv_params_0_0=ruleUEPARAMS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUEMetaObjectRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_0_0, 
        		"UEPARAMS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUEMetaObjectAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUEMetaObjectAccess().getParamValueUEValueParserRuleCall_2_0()); 
	    }
		lv_paramValue_2_0=ruleUEValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUEMetaObjectRule());
	        }
       		set(
       			$current, 
       			"paramValue",
        		lv_paramValue_2_0, 
        		"UEValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUEValue
entryRuleUEValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUEValueRule()); } 
	 iv_ruleUEValue=ruleUEValue 
	 { $current=$iv_ruleUEValue.current.getText(); }  
	 EOF 
;

// Rule UEValue
ruleUEValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getUEValueAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getUEValueAccess().getIDTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getUEValueAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleTestCase
entryRuleTestCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestCaseRule()); }
	 iv_ruleTestCase=ruleTestCase 
	 { $current=$iv_ruleTestCase.current; } 
	 EOF 
;

// Rule TestCase
ruleTestCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TestCase' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestCaseAccess().getTestCaseKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestCaseAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTestCaseAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestCaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestCaseAccess().getMetaTestMetaParserRuleCall_3_0()); 
	    }
		lv_meta_3_0=ruleTestMeta		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestCaseRule());
	        }
       		set(
       			$current, 
       			"meta",
        		lv_meta_3_0, 
        		"TestMeta");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestCaseAccess().getProcedureProcedureParserRuleCall_4_0()); 
	    }
		lv_procedure_4_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestCaseRule());
	        }
       		set(
       			$current, 
       			"procedure",
        		lv_procedure_4_0, 
        		"Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTestCaseAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTestMeta
entryRuleTestMeta returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestMetaRule()); }
	 iv_ruleTestMeta=ruleTestMeta 
	 { $current=$iv_ruleTestMeta.current; } 
	 EOF 
;

// Rule TestMeta
ruleTestMeta returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestMetaAccess().getMetaTestMetaObjectParserRuleCall_0()); 
	    }
		lv_meta_0_0=ruleTestMetaObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestMetaRule());
	        }
       		add(
       			$current, 
       			"meta",
        		lv_meta_0_0, 
        		"TestMetaObject");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleTestMetaObject
entryRuleTestMetaObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestMetaObjectRule()); }
	 iv_ruleTestMetaObject=ruleTestMetaObject 
	 { $current=$iv_ruleTestMetaObject.current; } 
	 EOF 
;

// Rule TestMetaObject
ruleTestMetaObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTestMetaObjectAccess().getMetatypeMETATYPEEnumRuleCall_0_0()); 
	    }
		lv_metatype_0_0=ruleMETATYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestMetaObjectRule());
	        }
       		set(
       			$current, 
       			"metatype",
        		lv_metatype_0_0, 
        		"METATYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestMetaObjectAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestMetaObjectAccess().getMetaValueMetaValueParserRuleCall_2_0()); 
	    }
		lv_metaValue_2_0=ruleMetaValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestMetaObjectRule());
	        }
       		set(
       			$current, 
       			"metaValue",
        		lv_metaValue_2_0, 
        		"MetaValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMetaValue
entryRuleMetaValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetaValueRule()); } 
	 iv_ruleMetaValue=ruleMetaValue 
	 { $current=$iv_ruleMetaValue.current.getText(); }  
	 EOF 
;

// Rule MetaValue
ruleMetaValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getMetaValueAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Test' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getTestKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_2_0()); 
	    }
		lv_actions_2_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_2_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getNameACTIONSEnumRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleACTIONS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ACTIONS");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getParameterSetParameterSetParserRuleCall_1_0()); 
	    }
		lv_parameterSet_1_0=ruleParameterSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"parameterSet",
        		lv_parameterSet_1_0, 
        		"ParameterSet");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterSet
entryRuleParameterSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterSetRule()); }
	 iv_ruleParameterSet=ruleParameterSet 
	 { $current=$iv_ruleParameterSet.current; } 
	 EOF 
;

// Rule ParameterSet
ruleParameterSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterSetAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterSetAccess().getParametersParameterParserRuleCall_1_0()); 
	    }
		lv_parameters_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterSetRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterSetAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNameACTIONPARAMSEnumRuleCall_0_0_0()); 
	    }
		lv_name_0_0=ruleACTIONPARAMS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ACTIONPARAMS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=' : ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getSpaceColonSpaceKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getValueParameterValueParserRuleCall_0_2_0()); 
	    }
		lv_value_2_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ParameterValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getUeRefUECrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleParameterValue
entryRuleParameterValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterValueRule()); } 
	 iv_ruleParameterValue=ruleParameterValue 
	 { $current=$iv_ruleParameterValue.current.getText(); }  
	 EOF 
;

// Rule ParameterValue
ruleParameterValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getParameterValueAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getParameterValueAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;







// Rule ACTIONPARAMS
ruleACTIONPARAMS returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='UE' 
	{
        $current = grammarAccess.getACTIONPARAMSAccess().getUeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getACTIONPARAMSAccess().getUeEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='AnswerTime' 
	{
        $current = grammarAccess.getACTIONPARAMSAccess().getAnswerTimeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getACTIONPARAMSAccess().getAnswerTimeEnumLiteralDeclaration_1()); 
    }
));



// Rule UEPARAMS
ruleUEPARAMS returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='IMEI' 
	{
        $current = grammarAccess.getUEPARAMSAccess().getImeiEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUEPARAMSAccess().getImeiEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Name' 
	{
        $current = grammarAccess.getUEPARAMSAccess().getNameEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUEPARAMSAccess().getNameEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='MSISDN' 
	{
        $current = grammarAccess.getUEPARAMSAccess().getMsidnEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUEPARAMSAccess().getMsidnEnumLiteralDeclaration_2()); 
    }
));



// Rule METATYPE
ruleMETATYPE returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='Description' 
	{
        $current = grammarAccess.getMETATYPEAccess().getDescriptionEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMETATYPEAccess().getDescriptionEnumLiteralDeclaration()); 
    }
);



// Rule ACTIONS
ruleACTIONS returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='CALL' 
	{
        $current = grammarAccess.getACTIONSAccess().getCallEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getACTIONSAccess().getCallEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ANSWER' 
	{
        $current = grammarAccess.getACTIONSAccess().getAnswerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getACTIONSAccess().getAnswerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='USSD' 
	{
        $current = grammarAccess.getACTIONSAccess().getUssdEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getACTIONSAccess().getUssdEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='SMS' 
	{
        $current = grammarAccess.getACTIONSAccess().getSmsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getACTIONSAccess().getSmsEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='DATA' 
	{
        $current = grammarAccess.getACTIONSAccess().getDataEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getACTIONSAccess().getDataEnumLiteralDeclaration_4()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


