/*
* generated by Xtext
*/
grammar InternalDragonX;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.netxforge.netxtest.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.netxforge.netxtest.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.netxforge.netxtest.services.DragonXGrammarAccess;

}

@parser::members {

 	private DragonXGrammarAccess grammarAccess;
 	
    public InternalDragonXParser(TokenStream input, DragonXGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DragonX";	
   	}
   	
   	@Override
   	protected DragonXGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDragonX
entryRuleDragonX returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDragonXRule()); }
	 iv_ruleDragonX=ruleDragonX 
	 { $current=$iv_ruleDragonX.current; } 
	 EOF 
;

// Rule DragonX
ruleDragonX returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDragonXAccess().getTestsTestParserRuleCall_0()); 
	    }
		lv_tests_0_0=ruleTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDragonXRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_0_0, 
        		"Test");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruleTest=ruleTest 
	 { $current=$iv_ruleTest.current; } 
	 EOF 
;

// Rule Test
ruleTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TEST' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestAccess().getTESTKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getMetaTestMetaParserRuleCall_2_0()); 
	    }
		lv_meta_2_0=ruleTestMeta		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		set(
       			$current, 
       			"meta",
        		lv_meta_2_0, 
        		"TestMeta");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getProcedureProcedureParserRuleCall_3_0()); 
	    }
		lv_procedure_3_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		set(
       			$current, 
       			"procedure",
        		lv_procedure_3_0, 
        		"Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTestMeta
entryRuleTestMeta returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestMetaRule()); }
	 iv_ruleTestMeta=ruleTestMeta 
	 { $current=$iv_ruleTestMeta.current; } 
	 EOF 
;

// Rule TestMeta
ruleTestMeta returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestMetaAccess().getMetaTestMetaObjectParserRuleCall_0()); 
	    }
		lv_meta_0_0=ruleTestMetaObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestMetaRule());
	        }
       		add(
       			$current, 
       			"meta",
        		lv_meta_0_0, 
        		"TestMetaObject");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTestMetaObject
entryRuleTestMetaObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestMetaObjectRule()); }
	 iv_ruleTestMetaObject=ruleTestMetaObject 
	 { $current=$iv_ruleTestMetaObject.current; } 
	 EOF 
;

// Rule TestMetaObject
ruleTestMetaObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestMetaObjectAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestMetaObjectAccess().getMetatypeMETATYPEEnumRuleCall_1_0()); 
	    }
		lv_metatype_1_0=ruleMETATYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestMetaObjectRule());
	        }
       		set(
       			$current, 
       			"metatype",
        		lv_metatype_1_0, 
        		"METATYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestMetaObjectAccess().getRightSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestMetaObjectAccess().getMetaValueMetaValueParserRuleCall_3_0()); 
	    }
		lv_metaValue_3_0=ruleMetaValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestMetaObjectRule());
	        }
       		set(
       			$current, 
       			"metaValue",
        		lv_metaValue_3_0, 
        		"MetaValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMetaValue
entryRuleMetaValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetaValueRule()); } 
	 iv_ruleMetaValue=ruleMetaValue 
	 { $current=$iv_ruleMetaValue.current.getText(); }  
	 EOF 
;

// Rule MetaValue
ruleMetaValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getMetaValueAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_0()); 
	    }
		lv_actions_0_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_0_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getActionACTIONSEnumRuleCall_0_0()); 
	    }
		lv_action_0_0=ruleACTIONS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_0_0, 
        		"ACTIONS");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getParametersParameterParserRuleCall_1_0()); 
	    }
		lv_parameters_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getNumberSignKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getValueValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getValueAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Rule METATYPE
ruleMETATYPE returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='Description' 
	{
        $current = grammarAccess.getMETATYPEAccess().getDescriptionEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMETATYPEAccess().getDescriptionEnumLiteralDeclaration()); 
    }
);



// Rule ACTIONS
ruleACTIONS returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='CALL' 
	{
        $current = grammarAccess.getACTIONSAccess().getCallEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getACTIONSAccess().getCallEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='USSD' 
	{
        $current = grammarAccess.getACTIONSAccess().getUssdEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getACTIONSAccess().getUssdEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='SMS' 
	{
        $current = grammarAccess.getACTIONSAccess().getSmsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getACTIONSAccess().getSmsEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='DATA' 
	{
        $current = grammarAccess.getACTIONSAccess().getDataEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getACTIONSAccess().getDataEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


