/*
* generated by Xtext
*/
package com.netxforge.netxtest.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DragonXGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DragonXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DragonX");
		private final Assignment cTestsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_0 = (RuleCall)cTestsAssignment.eContents().get(0);
		
		//DragonX:
		//	tests+=Test*;
		public ParserRule getRule() { return rule; }

		//tests+=Test*
		public Assignment getTestsAssignment() { return cTestsAssignment; }

		//Test
		public RuleCall getTestsTestParserRuleCall_0() { return cTestsTestParserRuleCall_0; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTESTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMetaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetaTestMetaParserRuleCall_2_0 = (RuleCall)cMetaAssignment_2.eContents().get(0);
		private final Assignment cProcedureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcedureProcedureParserRuleCall_3_0 = (RuleCall)cProcedureAssignment_3.eContents().get(0);
		
		//Test:
		//	"TEST" name=ID meta=TestMeta procedure=Procedure;
		public ParserRule getRule() { return rule; }

		//"TEST" name=ID meta=TestMeta procedure=Procedure
		public Group getGroup() { return cGroup; }

		//"TEST"
		public Keyword getTESTKeyword_0() { return cTESTKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//meta=TestMeta
		public Assignment getMetaAssignment_2() { return cMetaAssignment_2; }

		//TestMeta
		public RuleCall getMetaTestMetaParserRuleCall_2_0() { return cMetaTestMetaParserRuleCall_2_0; }

		//procedure=Procedure
		public Assignment getProcedureAssignment_3() { return cProcedureAssignment_3; }

		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_3_0() { return cProcedureProcedureParserRuleCall_3_0; }
	}

	public class TestMetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestMeta");
		private final Assignment cMetaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMetaTestMetaObjectParserRuleCall_0 = (RuleCall)cMetaAssignment.eContents().get(0);
		
		//TestMeta:
		//	meta+=TestMetaObject;
		public ParserRule getRule() { return rule; }

		//meta+=TestMetaObject
		public Assignment getMetaAssignment() { return cMetaAssignment; }

		//TestMetaObject
		public RuleCall getMetaTestMetaObjectParserRuleCall_0() { return cMetaTestMetaObjectParserRuleCall_0; }
	}

	public class TestMetaObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestMetaObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetatypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetatypeMETATYPEEnumRuleCall_1_0 = (RuleCall)cMetatypeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetaValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetaValueMetaValueParserRuleCall_3_0 = (RuleCall)cMetaValueAssignment_3.eContents().get(0);
		
		//TestMetaObject:
		//	"[" metatype=METATYPE "]" metaValue=MetaValue;
		public ParserRule getRule() { return rule; }

		//"[" metatype=METATYPE "]" metaValue=MetaValue
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//metatype=METATYPE
		public Assignment getMetatypeAssignment_1() { return cMetatypeAssignment_1; }

		//METATYPE
		public RuleCall getMetatypeMETATYPEEnumRuleCall_1_0() { return cMetatypeMETATYPEEnumRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//metaValue=MetaValue
		public Assignment getMetaValueAssignment_3() { return cMetaValueAssignment_3; }

		//MetaValue
		public RuleCall getMetaValueMetaValueParserRuleCall_3_0() { return cMetaValueMetaValueParserRuleCall_3_0; }
	}

	public class MetaValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MetaValue:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Assignment cActionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_0 = (RuleCall)cActionsAssignment.eContents().get(0);
		
		//Procedure:
		//	actions+=Action;
		public ParserRule getRule() { return rule; }

		//actions+=Action
		public Assignment getActionsAssignment() { return cActionsAssignment; }

		//Action
		public RuleCall getActionsActionParserRuleCall_0() { return cActionsActionParserRuleCall_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionACTIONSEnumRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		
		//Action:
		//	action=ACTIONS parameters+=Parameter;
		public ParserRule getRule() { return rule; }

		//action=ACTIONS parameters+=Parameter
		public Group getGroup() { return cGroup; }

		//action=ACTIONS
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }

		//ACTIONS
		public RuleCall getActionACTIONSEnumRuleCall_0_0() { return cActionACTIONSEnumRuleCall_0_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0() { return cParametersParameterParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Parameter:
		//	"#" name=ID ":" value=Value;
		public ParserRule getRule() { return rule; }

		//"#" name=ID ":" value=Value
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	public class METATYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "METATYPE");
		private final EnumLiteralDeclaration cDescriptionEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDescriptionDescriptionKeyword_0 = (Keyword)cDescriptionEnumLiteralDeclaration.eContents().get(0);
		
		//enum METATYPE:
		//	description="Description";
		public EnumRule getRule() { return rule; }

		//description="Description"
		public EnumLiteralDeclaration getDescriptionEnumLiteralDeclaration() { return cDescriptionEnumLiteralDeclaration; }

		//"Description"
		public Keyword getDescriptionDescriptionKeyword_0() { return cDescriptionDescriptionKeyword_0; }
	}

	public class ACTIONSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ACTIONS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCallEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCallCALLKeyword_0_0 = (Keyword)cCallEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUssdEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUssdUSSDKeyword_1_0 = (Keyword)cUssdEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSmsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSmsSMSKeyword_2_0 = (Keyword)cSmsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDataEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDataDATAKeyword_3_0 = (Keyword)cDataEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ACTIONS:
		//	call="CALL" | ussd="USSD" | sms="SMS" | data="DATA";
		public EnumRule getRule() { return rule; }

		//call="CALL" | ussd="USSD" | sms="SMS" | data="DATA"
		public Alternatives getAlternatives() { return cAlternatives; }

		//call="CALL"
		public EnumLiteralDeclaration getCallEnumLiteralDeclaration_0() { return cCallEnumLiteralDeclaration_0; }

		//"CALL"
		public Keyword getCallCALLKeyword_0_0() { return cCallCALLKeyword_0_0; }

		//ussd="USSD"
		public EnumLiteralDeclaration getUssdEnumLiteralDeclaration_1() { return cUssdEnumLiteralDeclaration_1; }

		//"USSD"
		public Keyword getUssdUSSDKeyword_1_0() { return cUssdUSSDKeyword_1_0; }

		//sms="SMS"
		public EnumLiteralDeclaration getSmsEnumLiteralDeclaration_2() { return cSmsEnumLiteralDeclaration_2; }

		//"SMS"
		public Keyword getSmsSMSKeyword_2_0() { return cSmsSMSKeyword_2_0; }

		//data="DATA"
		public EnumLiteralDeclaration getDataEnumLiteralDeclaration_3() { return cDataEnumLiteralDeclaration_3; }

		//"DATA"
		public Keyword getDataDATAKeyword_3_0() { return cDataDATAKeyword_3_0; }
	}
	
	private DragonXElements pDragonX;
	private TestElements pTest;
	private TestMetaElements pTestMeta;
	private TestMetaObjectElements pTestMetaObject;
	private MetaValueElements pMetaValue;
	private ProcedureElements pProcedure;
	private ActionElements pAction;
	private ParameterElements pParameter;
	private ValueElements pValue;
	private METATYPEElements unknownRuleMETATYPE;
	private ACTIONSElements unknownRuleACTIONS;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DragonXGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.netxforge.netxtest.DragonX".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DragonX:
	//	tests+=Test*;
	public DragonXElements getDragonXAccess() {
		return (pDragonX != null) ? pDragonX : (pDragonX = new DragonXElements());
	}
	
	public ParserRule getDragonXRule() {
		return getDragonXAccess().getRule();
	}

	//Test:
	//	"TEST" name=ID meta=TestMeta procedure=Procedure;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//TestMeta:
	//	meta+=TestMetaObject;
	public TestMetaElements getTestMetaAccess() {
		return (pTestMeta != null) ? pTestMeta : (pTestMeta = new TestMetaElements());
	}
	
	public ParserRule getTestMetaRule() {
		return getTestMetaAccess().getRule();
	}

	//TestMetaObject:
	//	"[" metatype=METATYPE "]" metaValue=MetaValue;
	public TestMetaObjectElements getTestMetaObjectAccess() {
		return (pTestMetaObject != null) ? pTestMetaObject : (pTestMetaObject = new TestMetaObjectElements());
	}
	
	public ParserRule getTestMetaObjectRule() {
		return getTestMetaObjectAccess().getRule();
	}

	//MetaValue:
	//	STRING;
	public MetaValueElements getMetaValueAccess() {
		return (pMetaValue != null) ? pMetaValue : (pMetaValue = new MetaValueElements());
	}
	
	public ParserRule getMetaValueRule() {
		return getMetaValueAccess().getRule();
	}

	//Procedure:
	//	actions+=Action;
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//Action:
	//	action=ACTIONS parameters+=Parameter;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Parameter:
	//	"#" name=ID ":" value=Value;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Value:
	//	INT | STRING;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//enum METATYPE:
	//	description="Description";
	public METATYPEElements getMETATYPEAccess() {
		return (unknownRuleMETATYPE != null) ? unknownRuleMETATYPE : (unknownRuleMETATYPE = new METATYPEElements());
	}
	
	public EnumRule getMETATYPERule() {
		return getMETATYPEAccess().getRule();
	}

	//enum ACTIONS:
	//	call="CALL" | ussd="USSD" | sms="SMS" | data="DATA";
	public ACTIONSElements getACTIONSAccess() {
		return (unknownRuleACTIONS != null) ? unknownRuleACTIONS : (unknownRuleACTIONS = new ACTIONSElements());
	}
	
	public EnumRule getACTIONSRule() {
		return getACTIONSAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
