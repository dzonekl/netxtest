/*
* generated by Xtext
*/
package com.netxforge.netxtest.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DragonXGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DragonXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DragonX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUesUEParserRuleCall_0_0 = (RuleCall)cUesAssignment_0.eContents().get(0);
		private final Assignment cTestsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestsTestCaseParserRuleCall_1_0 = (RuleCall)cTestsAssignment_1.eContents().get(0);
		
		//DragonX:
		//	ues+=UE+ tests+=TestCase+;
		public ParserRule getRule() { return rule; }

		//ues+=UE+ tests+=TestCase+
		public Group getGroup() { return cGroup; }

		//ues+=UE+
		public Assignment getUesAssignment_0() { return cUesAssignment_0; }

		//UE
		public RuleCall getUesUEParserRuleCall_0_0() { return cUesUEParserRuleCall_0_0; }

		//tests+=TestCase+
		public Assignment getTestsAssignment_1() { return cTestsAssignment_1; }

		//TestCase
		public RuleCall getTestsTestCaseParserRuleCall_1_0() { return cTestsTestCaseParserRuleCall_1_0; }
	}

	public class UEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetaUEMetaObjectParserRuleCall_3_0 = (RuleCall)cMetaAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// A User Equipment Definition. 
		//UE:
		//	"UE" name=ID "{" meta+=UEMetaObject+ "}";
		public ParserRule getRule() { return rule; }

		//"UE" name=ID "{" meta+=UEMetaObject+ "}"
		public Group getGroup() { return cGroup; }

		//"UE"
		public Keyword getUEKeyword_0() { return cUEKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//meta+=UEMetaObject+
		public Assignment getMetaAssignment_3() { return cMetaAssignment_3; }

		//UEMetaObject
		public RuleCall getMetaUEMetaObjectParserRuleCall_3_0() { return cMetaUEMetaObjectParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class UEMetaObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UEMetaObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsUEPARAMSEnumRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamValueUEValueParserRuleCall_2_0 = (RuleCall)cParamValueAssignment_2.eContents().get(0);
		
		//UEMetaObject:
		//	params=UEPARAMS ":" paramValue=UEValue;
		public ParserRule getRule() { return rule; }

		//params=UEPARAMS ":" paramValue=UEValue
		public Group getGroup() { return cGroup; }

		//params=UEPARAMS
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }

		//UEPARAMS
		public RuleCall getParamsUEPARAMSEnumRuleCall_0_0() { return cParamsUEPARAMSEnumRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//paramValue=UEValue
		public Assignment getParamValueAssignment_2() { return cParamValueAssignment_2; }

		//UEValue
		public RuleCall getParamValueUEValueParserRuleCall_2_0() { return cParamValueUEValueParserRuleCall_2_0; }
	}

	public class UEValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UEValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UEValue:
		//	STRING | ID | INT;
		public ParserRule getRule() { return rule; }

		//STRING | ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class TestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cMetaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetaTestMetaParserRuleCall_3_0 = (RuleCall)cMetaAssignment_3.eContents().get(0);
		private final Assignment cProcedureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcedureProcedureParserRuleCall_4_0 = (RuleCall)cProcedureAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TestCase:
		//	"TestCase" "{" name=ID meta=TestMeta procedure=Procedure "}";
		public ParserRule getRule() { return rule; }

		//"TestCase" "{" name=ID meta=TestMeta procedure=Procedure "}"
		public Group getGroup() { return cGroup; }

		//"TestCase"
		public Keyword getTestCaseKeyword_0() { return cTestCaseKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//meta=TestMeta
		public Assignment getMetaAssignment_3() { return cMetaAssignment_3; }

		//TestMeta
		public RuleCall getMetaTestMetaParserRuleCall_3_0() { return cMetaTestMetaParserRuleCall_3_0; }

		//procedure=Procedure
		public Assignment getProcedureAssignment_4() { return cProcedureAssignment_4; }

		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_4_0() { return cProcedureProcedureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TestMetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestMeta");
		private final Assignment cMetaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMetaTestMetaObjectParserRuleCall_0 = (RuleCall)cMetaAssignment.eContents().get(0);
		
		//TestMeta:
		//	meta+=TestMetaObject+;
		public ParserRule getRule() { return rule; }

		//meta+=TestMetaObject+
		public Assignment getMetaAssignment() { return cMetaAssignment; }

		//TestMetaObject
		public RuleCall getMetaTestMetaObjectParserRuleCall_0() { return cMetaTestMetaObjectParserRuleCall_0; }
	}

	public class TestMetaObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestMetaObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetatypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetatypeMETATYPEEnumRuleCall_0_0 = (RuleCall)cMetatypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetaValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetaValueMetaValueParserRuleCall_2_0 = (RuleCall)cMetaValueAssignment_2.eContents().get(0);
		
		//TestMetaObject:
		//	metatype=METATYPE ":" metaValue=MetaValue;
		public ParserRule getRule() { return rule; }

		//metatype=METATYPE ":" metaValue=MetaValue
		public Group getGroup() { return cGroup; }

		//metatype=METATYPE
		public Assignment getMetatypeAssignment_0() { return cMetatypeAssignment_0; }

		//METATYPE
		public RuleCall getMetatypeMETATYPEEnumRuleCall_0_0() { return cMetatypeMETATYPEEnumRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//metaValue=MetaValue
		public Assignment getMetaValueAssignment_2() { return cMetaValueAssignment_2; }

		//MetaValue
		public RuleCall getMetaValueMetaValueParserRuleCall_2_0() { return cMetaValueMetaValueParserRuleCall_2_0; }
	}

	public class MetaValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MetaValue:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Procedure:
		//	"Test" "{" actions+=Action "}";
		public ParserRule getRule() { return rule; }

		//"Test" "{" actions+=Action "}"
		public Group getGroup() { return cGroup; }

		//"Test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//actions+=Action
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameACTIONSEnumRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cParameterSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterSetParameterSetParserRuleCall_1_0 = (RuleCall)cParameterSetAssignment_1.eContents().get(0);
		
		//Action:
		//	name=ACTIONS parameterSet=ParameterSet;
		public ParserRule getRule() { return rule; }

		//name=ACTIONS parameterSet=ParameterSet
		public Group getGroup() { return cGroup; }

		//name=ACTIONS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ACTIONS
		public RuleCall getNameACTIONSEnumRuleCall_0_0() { return cNameACTIONSEnumRuleCall_0_0; }

		//parameterSet=ParameterSet
		public Assignment getParameterSetAssignment_1() { return cParameterSetAssignment_1; }

		//ParameterSet
		public RuleCall getParameterSetParameterSetParserRuleCall_1_0() { return cParameterSetParameterSetParserRuleCall_1_0; }
	}

	public class ParameterSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParameterSet:
		//	"{" parameters+=Parameter+ "}";
		public ParserRule getRule() { return rule; }

		//"{" parameters+=Parameter+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//parameters+=Parameter+
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0() { return cParametersParameterParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameACTIONPARAMSEnumRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueParameterValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cUeRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cUeRefUECrossReference_2_1_0 = (CrossReference)cUeRefAssignment_2_1.eContents().get(0);
		private final RuleCall cUeRefUEIDTerminalRuleCall_2_1_0_1 = (RuleCall)cUeRefUECrossReference_2_1_0.eContents().get(1);
		
		//// Free form parameter, but could be. 
		//Parameter:
		//	name=ACTIONPARAMS ":" (value=ParameterValue | ueRef=[UE]);
		public ParserRule getRule() { return rule; }

		//name=ACTIONPARAMS ":" (value=ParameterValue | ueRef=[UE])
		public Group getGroup() { return cGroup; }

		//name=ACTIONPARAMS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ACTIONPARAMS
		public RuleCall getNameACTIONPARAMSEnumRuleCall_0_0() { return cNameACTIONPARAMSEnumRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=ParameterValue | ueRef=[UE]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=ParameterValue
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_2_0_0() { return cValueParameterValueParserRuleCall_2_0_0; }

		//ueRef=[UE]
		public Assignment getUeRefAssignment_2_1() { return cUeRefAssignment_2_1; }

		//[UE]
		public CrossReference getUeRefUECrossReference_2_1_0() { return cUeRefUECrossReference_2_1_0; }

		//ID
		public RuleCall getUeRefUEIDTerminalRuleCall_2_1_0_1() { return cUeRefUEIDTerminalRuleCall_2_1_0_1; }
	}

	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterValue:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class QUALIFIED_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIED_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSpaceFullStopSpaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QUALIFIED_ID:
		//	ID (" . " ID)*;
		public ParserRule getRule() { return rule; }

		//ID (" . " ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(" . " ID)*
		public Group getGroup_1() { return cGroup_1; }

		//" . "
		public Keyword getSpaceFullStopSpaceKeyword_1_0() { return cSpaceFullStopSpaceKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ACTIONPARAMSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ACTIONPARAMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUeUEKeyword_0_0 = (Keyword)cUeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnswerTimeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnswerTimeAnswerTimeKeyword_1_0 = (Keyword)cAnswerTimeEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ACTIONPARAMS:
		//	ue="UE" | answerTime="AnswerTime";
		public EnumRule getRule() { return rule; }

		//ue="UE" | answerTime="AnswerTime"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ue="UE"
		public EnumLiteralDeclaration getUeEnumLiteralDeclaration_0() { return cUeEnumLiteralDeclaration_0; }

		//"UE"
		public Keyword getUeUEKeyword_0_0() { return cUeUEKeyword_0_0; }

		//answerTime="AnswerTime"
		public EnumLiteralDeclaration getAnswerTimeEnumLiteralDeclaration_1() { return cAnswerTimeEnumLiteralDeclaration_1; }

		//"AnswerTime"
		public Keyword getAnswerTimeAnswerTimeKeyword_1_0() { return cAnswerTimeAnswerTimeKeyword_1_0; }
	}

	public class UEPARAMSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UEPARAMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cImeiEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cImeiIMEIKeyword_0_0 = (Keyword)cImeiEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMsidnEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMsidnMSISDNKeyword_1_0 = (Keyword)cMsidnEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UEPARAMS:
		//	imei="IMEI" | msidn="MSISDN";
		public EnumRule getRule() { return rule; }

		//imei="IMEI" | msidn="MSISDN"
		public Alternatives getAlternatives() { return cAlternatives; }

		//imei="IMEI"
		public EnumLiteralDeclaration getImeiEnumLiteralDeclaration_0() { return cImeiEnumLiteralDeclaration_0; }

		//"IMEI"
		public Keyword getImeiIMEIKeyword_0_0() { return cImeiIMEIKeyword_0_0; }

		//msidn="MSISDN"
		public EnumLiteralDeclaration getMsidnEnumLiteralDeclaration_1() { return cMsidnEnumLiteralDeclaration_1; }

		//"MSISDN"
		public Keyword getMsidnMSISDNKeyword_1_0() { return cMsidnMSISDNKeyword_1_0; }
	}

	public class METATYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "METATYPE");
		private final EnumLiteralDeclaration cDescriptionEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDescriptionDescriptionKeyword_0 = (Keyword)cDescriptionEnumLiteralDeclaration.eContents().get(0);
		
		//enum METATYPE:
		//	description="Description";
		public EnumRule getRule() { return rule; }

		//description="Description"
		public EnumLiteralDeclaration getDescriptionEnumLiteralDeclaration() { return cDescriptionEnumLiteralDeclaration; }

		//"Description"
		public Keyword getDescriptionDescriptionKeyword_0() { return cDescriptionDescriptionKeyword_0; }
	}

	public class ACTIONSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ACTIONS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCallEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCallCALLKeyword_0_0 = (Keyword)cCallEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnswerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnswerANSWERKeyword_1_0 = (Keyword)cAnswerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUssdEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUssdUSSDKeyword_2_0 = (Keyword)cUssdEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSmsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSmsSMSKeyword_3_0 = (Keyword)cSmsEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDataEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDataDATAKeyword_4_0 = (Keyword)cDataEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ACTIONS:
		//	call="CALL" | answer="ANSWER" | ussd="USSD" | sms="SMS" | data="DATA";
		public EnumRule getRule() { return rule; }

		//call="CALL" | answer="ANSWER" | ussd="USSD" | sms="SMS" | data="DATA"
		public Alternatives getAlternatives() { return cAlternatives; }

		//call="CALL"
		public EnumLiteralDeclaration getCallEnumLiteralDeclaration_0() { return cCallEnumLiteralDeclaration_0; }

		//"CALL"
		public Keyword getCallCALLKeyword_0_0() { return cCallCALLKeyword_0_0; }

		//answer="ANSWER"
		public EnumLiteralDeclaration getAnswerEnumLiteralDeclaration_1() { return cAnswerEnumLiteralDeclaration_1; }

		//"ANSWER"
		public Keyword getAnswerANSWERKeyword_1_0() { return cAnswerANSWERKeyword_1_0; }

		//ussd="USSD"
		public EnumLiteralDeclaration getUssdEnumLiteralDeclaration_2() { return cUssdEnumLiteralDeclaration_2; }

		//"USSD"
		public Keyword getUssdUSSDKeyword_2_0() { return cUssdUSSDKeyword_2_0; }

		//sms="SMS"
		public EnumLiteralDeclaration getSmsEnumLiteralDeclaration_3() { return cSmsEnumLiteralDeclaration_3; }

		//"SMS"
		public Keyword getSmsSMSKeyword_3_0() { return cSmsSMSKeyword_3_0; }

		//data="DATA"
		public EnumLiteralDeclaration getDataEnumLiteralDeclaration_4() { return cDataEnumLiteralDeclaration_4; }

		//"DATA"
		public Keyword getDataDATAKeyword_4_0() { return cDataDATAKeyword_4_0; }
	}
	
	private DragonXElements pDragonX;
	private UEElements pUE;
	private UEMetaObjectElements pUEMetaObject;
	private UEValueElements pUEValue;
	private TestCaseElements pTestCase;
	private TestMetaElements pTestMeta;
	private TestMetaObjectElements pTestMetaObject;
	private MetaValueElements pMetaValue;
	private ProcedureElements pProcedure;
	private ActionElements pAction;
	private ParameterSetElements pParameterSet;
	private ParameterElements pParameter;
	private ParameterValueElements pParameterValue;
	private ACTIONPARAMSElements unknownRuleACTIONPARAMS;
	private UEPARAMSElements unknownRuleUEPARAMS;
	private METATYPEElements unknownRuleMETATYPE;
	private ACTIONSElements unknownRuleACTIONS;
	private QUALIFIED_IDElements pQUALIFIED_ID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DragonXGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.netxforge.netxtest.DragonX".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DragonX:
	//	ues+=UE+ tests+=TestCase+;
	public DragonXElements getDragonXAccess() {
		return (pDragonX != null) ? pDragonX : (pDragonX = new DragonXElements());
	}
	
	public ParserRule getDragonXRule() {
		return getDragonXAccess().getRule();
	}

	//// A User Equipment Definition. 
	//UE:
	//	"UE" name=ID "{" meta+=UEMetaObject+ "}";
	public UEElements getUEAccess() {
		return (pUE != null) ? pUE : (pUE = new UEElements());
	}
	
	public ParserRule getUERule() {
		return getUEAccess().getRule();
	}

	//UEMetaObject:
	//	params=UEPARAMS ":" paramValue=UEValue;
	public UEMetaObjectElements getUEMetaObjectAccess() {
		return (pUEMetaObject != null) ? pUEMetaObject : (pUEMetaObject = new UEMetaObjectElements());
	}
	
	public ParserRule getUEMetaObjectRule() {
		return getUEMetaObjectAccess().getRule();
	}

	//UEValue:
	//	STRING | ID | INT;
	public UEValueElements getUEValueAccess() {
		return (pUEValue != null) ? pUEValue : (pUEValue = new UEValueElements());
	}
	
	public ParserRule getUEValueRule() {
		return getUEValueAccess().getRule();
	}

	//TestCase:
	//	"TestCase" "{" name=ID meta=TestMeta procedure=Procedure "}";
	public TestCaseElements getTestCaseAccess() {
		return (pTestCase != null) ? pTestCase : (pTestCase = new TestCaseElements());
	}
	
	public ParserRule getTestCaseRule() {
		return getTestCaseAccess().getRule();
	}

	//TestMeta:
	//	meta+=TestMetaObject+;
	public TestMetaElements getTestMetaAccess() {
		return (pTestMeta != null) ? pTestMeta : (pTestMeta = new TestMetaElements());
	}
	
	public ParserRule getTestMetaRule() {
		return getTestMetaAccess().getRule();
	}

	//TestMetaObject:
	//	metatype=METATYPE ":" metaValue=MetaValue;
	public TestMetaObjectElements getTestMetaObjectAccess() {
		return (pTestMetaObject != null) ? pTestMetaObject : (pTestMetaObject = new TestMetaObjectElements());
	}
	
	public ParserRule getTestMetaObjectRule() {
		return getTestMetaObjectAccess().getRule();
	}

	//MetaValue:
	//	STRING;
	public MetaValueElements getMetaValueAccess() {
		return (pMetaValue != null) ? pMetaValue : (pMetaValue = new MetaValueElements());
	}
	
	public ParserRule getMetaValueRule() {
		return getMetaValueAccess().getRule();
	}

	//Procedure:
	//	"Test" "{" actions+=Action "}";
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//Action:
	//	name=ACTIONS parameterSet=ParameterSet;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ParameterSet:
	//	"{" parameters+=Parameter+ "}";
	public ParameterSetElements getParameterSetAccess() {
		return (pParameterSet != null) ? pParameterSet : (pParameterSet = new ParameterSetElements());
	}
	
	public ParserRule getParameterSetRule() {
		return getParameterSetAccess().getRule();
	}

	//// Free form parameter, but could be. 
	//Parameter:
	//	name=ACTIONPARAMS ":" (value=ParameterValue | ueRef=[UE]);
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterValue:
	//	INT | STRING;
	public ParameterValueElements getParameterValueAccess() {
		return (pParameterValue != null) ? pParameterValue : (pParameterValue = new ParameterValueElements());
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}

	//enum ACTIONPARAMS:
	//	ue="UE" | answerTime="AnswerTime";
	public ACTIONPARAMSElements getACTIONPARAMSAccess() {
		return (unknownRuleACTIONPARAMS != null) ? unknownRuleACTIONPARAMS : (unknownRuleACTIONPARAMS = new ACTIONPARAMSElements());
	}
	
	public EnumRule getACTIONPARAMSRule() {
		return getACTIONPARAMSAccess().getRule();
	}

	//enum UEPARAMS:
	//	imei="IMEI" | msidn="MSISDN";
	public UEPARAMSElements getUEPARAMSAccess() {
		return (unknownRuleUEPARAMS != null) ? unknownRuleUEPARAMS : (unknownRuleUEPARAMS = new UEPARAMSElements());
	}
	
	public EnumRule getUEPARAMSRule() {
		return getUEPARAMSAccess().getRule();
	}

	//enum METATYPE:
	//	description="Description";
	public METATYPEElements getMETATYPEAccess() {
		return (unknownRuleMETATYPE != null) ? unknownRuleMETATYPE : (unknownRuleMETATYPE = new METATYPEElements());
	}
	
	public EnumRule getMETATYPERule() {
		return getMETATYPEAccess().getRule();
	}

	//enum ACTIONS:
	//	call="CALL" | answer="ANSWER" | ussd="USSD" | sms="SMS" | data="DATA";
	public ACTIONSElements getACTIONSAccess() {
		return (unknownRuleACTIONS != null) ? unknownRuleACTIONS : (unknownRuleACTIONS = new ACTIONSElements());
	}
	
	public EnumRule getACTIONSRule() {
		return getACTIONSAccess().getRule();
	}

	//QUALIFIED_ID:
	//	ID (" . " ID)*;
	public QUALIFIED_IDElements getQUALIFIED_IDAccess() {
		return (pQUALIFIED_ID != null) ? pQUALIFIED_ID : (pQUALIFIED_ID = new QUALIFIED_IDElements());
	}
	
	public ParserRule getQUALIFIED_IDRule() {
		return getQUALIFIED_IDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
