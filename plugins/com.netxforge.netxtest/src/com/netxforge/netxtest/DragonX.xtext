/**
 * The DragonX DSL is a grammar for definition and execution of tests. 
 * 
 * author: Christophe Bouhier
 * 
 * */
grammar com.netxforge.netxtest.DragonX with org.eclipse.xtext.common.Terminals

generate dragonX "http://www.netxforge.com/netxtest/DragonX"

// DragonX script exists of UE- and TestCase blocks
DragonX:
	ues+=UE+
	tests+=TestCase+;


// UE block
UE:
	'UE' name=ID '{' meta+=UEMetaObject+ '}';

UEMetaObject:
	(params=UEPARAMS ':' paramValue=UEValue) | (DescriptionObject);

UEValue:
	STRING | ID | INT;


// TestCase block	
TestCase:
	'TestCase' name=ID '{' (description = DescriptionObject)? procedure=Procedure '}';

	
DescriptionObject:
	'Description' ':' description = STRING;

Procedure:
	'Test' '{' actions+=Action+ '}';

Action:
	((name='CALL' '{' parameterSet=ParameterSetCall) | (name='ANSWER'  '{' parameterSet=ParameterSetAnswer ) |
	 (name= 'USSD'  '{' parameterSet=ParameterSetUssd) | (name='SMS' '{' parameterSet=ParameterSetSms) |
	 (name='DATA' '{' parameterSet=ParameterSetData) | (name='MIXER' '{' parameterSet=ParameterSetMixer)) '}';

ParameterSetCall:
	parameters+=ParameterCall;

ParameterSetAnswer:
	parameters+= ParameterAnswer;

ParameterSetUssd:
	parameters+=ParameterUssd;

ParameterSetSms:
	parameters+= ParameterSms;

ParameterSetData:
	parameters+=ParameterData;

ParameterSetMixer:
	(parameters += ParameterMixer+);

ParameterCall:
	 ('From' ':' from=[UE]) ('To' ':' to=[UE]) ('CallingTime' ':' callingTime=INT)? 
	('OffHookResponse' ':' ofhookResponse=CALLRESPONSE ('ResponseTime' ':' responseTime=INT)?  );
	
ParameterAnswer:
	('From' ':' from=[UE]) ('ListeningTime' ':' listeningTime=INT) ('AnswerTime' ':' answerTime=INT)? ('Response' ':' response= ANSWERRESPONSE)?;
	
ParameterUssd:
	('From' ':' from=[UE]) (
	(('USSDCode' ':' cfCode=CALLFORWARDING ('Destination' ':' destination= [UE])? ('ServiceDelay' ':' serviceDelay=INT)?)) |
	 ('USSDCode' ':' barringCode = BARRING ('Code' ':' code= INT)? ) |
     ('USSDCode' ':' liCode = LINEIDENTIFICATION )) (ussdregistration= USSDREGISTRATION)?;

ParameterSms:
	('From' ':' from=[UE]) ('To' ':' to=[UE]) (message=STRING);

ParameterData:
	('From' ':' from=[UE]) ('url' ':' url=STRING)? ('To' ':' to=[UE] 'data' ':' data= STRING)?;

ParameterMixer:
	(mixer= MIXER ':' value = INT)	| (option= MIXEROPTIONS);

enum MIXEROPTIONS:
	reset = 'Reset';
		
enum MIXER:
	p1='P1' | p2='P2' | p3='p3' | p4='p4' | p5='p5' | p6='p6';

enum USSDREGISTRATION:
	activate='Activate' | deactivate='Deactivate';
	
enum CALLFORWARDING:
	cfu='CFU' | cfb='CFB' |cfna='CFNA' |cfnr='CFNR' | acd='ACD';

enum BARRING:
	allOutgoingCalls = 'AllOutgoingCalls' | allIncommingCalls = 'AllIncomingCalls' |
	 allOutgoingCallsExHome = 'AllOutgoingCallsExHome' |allIncommingCallsRoaming = 'AllIncommingCallsRoaming';

enum LINEIDENTIFICATION:
	clip = 'CLIP' | clir = 'CLIR' | colp = 'COLP' | colr = 'COLR';
	
enum ANSWERRESPONSE:
	listening = 'Listening' | offhook='OffHook' | hangup='HangUp';

enum CALLRESPONSE:
	listening = 'Listening' | hangup='HangUp';

enum UEPARAMS:
	imei='IMEI' | msisdn='MSISDN';

QUALIFIED_ID:
	ID (' . ' ID)*;